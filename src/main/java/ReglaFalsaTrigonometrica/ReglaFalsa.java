/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ReglaFalsaTrigonometrica;

/**
 *
 * @author isaac
 */

import javax.swing.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class ReglaFalsa extends javax.swing.JFrame {

    private DefaultTableModel modelo;
    private JTable tabla;
    private JScrollPane scroll;
    ;

    /**
     * Creates new form ReglaFalsa
     */
    public ReglaFalsa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        btnx6 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnx5 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnx4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnx3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnx2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnx = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnC = new javax.swing.JTextField();
        RadioRadianes = new javax.swing.JRadioButton();
        RadioGrados = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        radioSeno = new javax.swing.JRadioButton();
        RadioCos = new javax.swing.JRadioButton();
        Radiotan = new javax.swing.JRadioButton();
        radioCot = new javax.swing.JRadioButton();
        radioCsc = new javax.swing.JRadioButton();
        radioSec = new javax.swing.JRadioButton();
        btnCalcular = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 500));
        setMinimumSize(new java.awt.Dimension(900, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 500));
        getContentPane().setLayout(null);

        jLabel1.setText("X⁶");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(51, 17, 11, 16);
        getContentPane().add(btnx6);
        btnx6.setBounds(20, 50, 64, 22);

        jLabel2.setText("x⁵");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(120, 20, 15, 16);
        getContentPane().add(btnx5);
        btnx5.setBounds(100, 50, 64, 22);

        jLabel3.setText("x⁴");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(210, 20, 10, 16);
        getContentPane().add(btnx4);
        btnx4.setBounds(180, 50, 64, 22);

        jLabel4.setText("x³");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(280, 20, 15, 16);
        getContentPane().add(btnx3);
        btnx3.setBounds(260, 50, 64, 22);

        jLabel5.setText("x²");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(370, 20, 10, 16);
        getContentPane().add(btnx2);
        btnx2.setBounds(340, 50, 64, 22);

        jLabel6.setText("x");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(440, 20, 15, 16);
        getContentPane().add(btnx);
        btnx.setBounds(420, 50, 64, 22);

        jLabel7.setText("c");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(520, 20, 15, 16);

        btnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCActionPerformed(evt);
            }
        });
        getContentPane().add(btnC);
        btnC.setBounds(500, 50, 64, 22);

        RadioRadianes.setText("Radianes");
        RadioRadianes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioRadianesActionPerformed(evt);
            }
        });
        getContentPane().add(RadioRadianes);
        RadioRadianes.setBounds(40, 220, 70, 21);

        RadioGrados.setText("Grados");
        RadioGrados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioGradosActionPerformed(evt);
            }
        });
        //grupo de botones para radianes y grados
        buttonGroup1.add(RadioRadianes);
        buttonGroup1.add(RadioGrados);

        getContentPane().add(RadioGrados);
        RadioGrados.setBounds(150, 220, 115, 21);

        jLabel15.setText("Error");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(30, 380, 25, 16);
        getContentPane().add(jTextField9);
        jTextField9.setBounds(20, 420, 90, 22);

        jLabel16.setText("Decimales");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(150, 390, 100, 16);
        getContentPane().add(jTextField10);
        jTextField10.setBounds(140, 420, 100, 22);

        radioSeno.setText("Sen");
        getContentPane().add(radioSeno);
        radioSeno.setBounds(60, 130, 42, 21);

        RadioCos.setText("Cos");
        getContentPane().add(RadioCos);
        RadioCos.setBounds(130, 130, 43, 21);

        Radiotan.setText("Tan");
        getContentPane().add(Radiotan);
        Radiotan.setBounds(200, 130, 42, 21);

        radioCot.setText("Cot");
        getContentPane().add(radioCot);
        radioCot.setBounds(270, 130, 47, 21);

        radioCsc.setText("Csc");
        getContentPane().add(radioCsc);
        radioCsc.setBounds(380, 130, 42, 21);

        radioSec.setText("Sec");
        getContentPane().add(radioSec);
        radioSec.setBounds(330, 130, 41, 21);

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        getContentPane().add(btnCalcular);
        btnCalcular.setBounds(630, 50, 100, 23);

        btnLimpiar.setText("Limpiar");
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(630, 90, 100, 23);

        pack();

        // Inicializa la tabla y el JScrollPane al principio
        modelo = new DefaultTableModel();
        modelo.addColumn("Iteración");
        modelo.addColumn("raiz");
        modelo.addColumn("error");
        tabla = new JTable(modelo);
        scroll = new JScrollPane(tabla);
        scroll.setBounds(500, 110, 380, 500);
        add(scroll);


    }// </editor-fold>//GEN-END:initComponents


    // Declarar los JRadioButton como variables de instancia
    JRadioButton piRadianButton;
    JRadioButton decimalRadianButton;
    JRadioButton DeciamlesGrado;
    JRadioButton MinutosGrado;

    //declara jtextfield
    JTextField numerador1;
    JTextField denominador1;
    JTextField numerador2;
    JTextField denominador2;

    JTextField radian1;
    JTextField radian2;

    JTextField grados1;
    JTextField grados2;

    JTextField minutos1;
    JTextField minutos2;

    JTextField segundos1;
    JTextField segundos2;

    JTextField gradosnormales1;
    JTextField gradosnormales2;

    //declarar variables para saber si se selecciono radianes o grados
    int opcion = 0;


    //declarar dos variables que vana recibir los valores de los txtfield
    double a;
    double b;

    private void btnCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCActionPerformed

    private void RadioRadianesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioRadianesActionPerformed
        // TODO add your handling code here:
        // Eliminar todos los botones de grados
        if (DeciamlesGrado != null) {
            getContentPane().remove(DeciamlesGrado);
            DeciamlesGrado = null;
        }
        if (MinutosGrado != null) {
            getContentPane().remove(MinutosGrado);
            MinutosGrado = null;
        }


        //eliminar los txtfield de grados
        if (grados1 != null && grados2 != null && minutos1 != null && minutos2 != null && segundos1 != null && segundos2 != null) {
            getContentPane().remove(grados1);
            getContentPane().remove(grados2);
            getContentPane().remove(minutos1);
            getContentPane().remove(minutos2);
            getContentPane().remove(segundos1);
            getContentPane().remove(segundos2);
            grados1 = null;
            grados2 = null;
            minutos1 = null;
            minutos2 = null;
            segundos1 = null;
            segundos2 = null;
        }

        //eliminar los txtfield de grados normales
        if (gradosnormales1 != null && gradosnormales2 != null) {
            getContentPane().remove(gradosnormales1);
            getContentPane().remove(gradosnormales2);
            gradosnormales1 = null;
            gradosnormales2 = null;
        }


        // Crear los nuevos JRadioButton
        piRadianButton = new JRadioButton("PI Radian");
        decimalRadianButton = new JRadioButton("Decimal Radian");

        // Agregar los nuevos botones al panel
        getContentPane().add(piRadianButton);
        getContentPane().add(decimalRadianButton);

        // Posicionar los nuevos botones
        piRadianButton.setBounds(40, 250, 100, 23);
        decimalRadianButton.setBounds(150, 250, 120, 23);

        // Actualizar el panel
        getContentPane().revalidate();
        getContentPane().repaint();


        //action listener vacio para pi radian
        piRadianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //llama al evento de pi radian
                piRadianButtonActionPerformed(evt);
            }
        });

        //action listener vacio para decimal radian
        decimalRadianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalRadianButtonActionPerformed(evt);
            }
        });


    }//GEN-LAST:event_RadioRadianesActionPerformed

    //evento de decimal radian
    private void decimalRadianButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        opcion = 0;
        //oculta los botones de radianes
        if (piRadianButton != null && decimalRadianButton != null) {
            getContentPane().remove(piRadianButton);
            getContentPane().remove(decimalRadianButton);
            piRadianButton = null;
            decimalRadianButton = null;
        }

        //ocultar todos los txtfield y radiobuttons que no se utilicen en el evento
        if (numerador1 != null && denominador1 != null && numerador2 != null && denominador2 != null) {
            getContentPane().remove(numerador1);
            getContentPane().remove(denominador1);
            getContentPane().remove(numerador2);
            getContentPane().remove(denominador2);
            numerador1 = null;
            denominador1 = null;
            numerador2 = null;
            denominador2 = null;
        }

        if (grados1 != null && grados2 != null) {
            getContentPane().remove(grados1);
            getContentPane().remove(grados2);
            grados1 = null;
            grados2 = null;
        }

        if (minutos1 != null && minutos2 != null) {
            getContentPane().remove(minutos1);
            getContentPane().remove(minutos2);
            minutos1 = null;
            minutos2 = null;
        }

        if (segundos1 != null && segundos2 != null) {
            getContentPane().remove(segundos1);
            getContentPane().remove(segundos2);
            segundos1 = null;
            segundos2 = null;
        }

        if (gradosnormales1 != null && gradosnormales2 != null) {
            getContentPane().remove(gradosnormales1);
            getContentPane().remove(gradosnormales2);
            gradosnormales1 = null;
            gradosnormales2 = null;
        }

        if (radian1 != null && radian2 != null) {
            getContentPane().remove(radian1);
            getContentPane().remove(radian2);
            radian1 = null;
            radian2 = null;
        }

        //se eliminan los botones de grados si existen
        if (DeciamlesGrado != null && MinutosGrado != null) {
            getContentPane().remove(DeciamlesGrado);
            getContentPane().remove(MinutosGrado);
            DeciamlesGrado = null;
            MinutosGrado = null;
        }


        //utilizar los dos txtfield de radianes para ingresar los valores
        //se crean los nuevos JtextField
        radian1 = new JTextField();
        radian2 = new JTextField();

        //se agregan los nuevos JtextField al panel
        getContentPane().add(radian1);
        getContentPane().add(radian2);

        //se posicionan los nuevos JtextField
        radian1.setBounds(40, 300, 100, 23);
        radian2.setBounds(150, 300, 100, 23);

        //se actualiza el panel
        getContentPane().revalidate();
        getContentPane().repaint();


    }


    //evento de pi radian
    private void piRadianButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        opcion = 1;

        //oculta los botones de radianes
        if (piRadianButton != null && decimalRadianButton != null) {
            getContentPane().remove(piRadianButton);
            getContentPane().remove(decimalRadianButton);
            piRadianButton = null;
            decimalRadianButton = null;
        }
        //eliminar txtfield de radianes decimal
        if (radian1 != null && radian2 != null) {
            getContentPane().remove(radian1);
            getContentPane().remove(radian2);
            radian1 = null;
            radian2 = null;
        }


        //utilizar los 2 numeradores y denominadores para ingresar los valores
        //se crean los nuevos JtextField
        numerador1 = new JTextField();
        denominador1 = new JTextField();
        numerador2 = new JTextField();
        denominador2 = new JTextField();

        //se agregan los nuevos JtextField al panel
        getContentPane().add(numerador1);
        getContentPane().add(denominador1);
        getContentPane().add(numerador2);
        getContentPane().add(denominador2); // Agrega denominador2 al panel

        //se posicionan los nuevos JtextField
        numerador1.setBounds(40, 300, 100, 23);
        denominador1.setBounds(150, 300, 100, 23);

        //posicion
        numerador2.setBounds(40, 350, 100, 23);
        denominador2.setBounds(150, 350, 100, 23);

        //se actualiza el panel
        getContentPane().revalidate();
        getContentPane().repaint();
    }


    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed

        //se inicializan las variables de x en 0
        double x6 = 0;
        double x5 = 0;
        double x4 = 0;
        double x3 = 0;
        double x2 = 0;
        double x = 0;
        double c = 0;




        try {

            // Obtener los valores de los campos de texto y convertirlos a números
            x6 = obtenerValor(btnx6);
            x5 = obtenerValor(btnx5);
            x4 = obtenerValor(btnx4);
            x3 = obtenerValor(btnx3);
            x2 = obtenerValor(btnx2);
            x = obtenerValor(btnx);
            c = obtenerValor(btnC);



        } catch (NumberFormatException e) {
            // Mostrar mensaje de error si alguno de los campos no contiene un valor numérico válido
            JOptionPane.showMessageDialog(null, "Ingrese un valor válido en todos los campos.");
        }







        //se optiene la opcion que eligio el usuario
        if (opcion == 0) {
            //validar los txtfield de radianes
            try {
                double valorradian1 = radian1.getText().isEmpty() ? 0.0 : Double.parseDouble(radian1.getText());
                double valorradian2 = radian2.getText().isEmpty() ? 0.0 : Double.parseDouble(radian2.getText());
                //se le asigan el valor de los txtfield a las variables
                a = valorradian1;
                b = valorradian2;
            } catch (Exception e) {
                //mensaje de error
                JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
                //limpiar los txtfield y volver su marco rojo
                radian1.setText("");
                radian2.setText("");
                radian1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                radian2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                return;
            }

        } else if (opcion == 1) {
            //validar los txtfield de fraccion
            try {
                double valornumerador1 = numerador1.getText().isEmpty() ? 0.0 : Double.parseDouble(numerador1.getText());
                double valordenominador1 = denominador1.getText().isEmpty() ? 0.0 : Double.parseDouble(denominador1.getText());
                double valornumerador2 = numerador2.getText().isEmpty() ? 0.0 : Double.parseDouble(numerador2.getText());
                double valordenominador2 = denominador2.getText().isEmpty() ? 0.0 : Double.parseDouble(denominador2.getText());


                // Validar que los denominadores no sean cero
                if (valordenominador1 == 0 || valordenominador2 == 0) {
                    JOptionPane.showMessageDialog(null, "Los denominadores no pueden ser cero");
                    //limpiar el txtfield que sea cero y volver su marco rojo
                    if (valordenominador1 == 0) {
                        denominador1.setText("");
                        denominador1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                    }
                    if (valordenominador2 == 0) {
                        denominador2.setText("");
                        denominador2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                    }
                    return;
                }

                //se hace la operacion para asignarle los valores de pi radian a las variables a y b
                a = ((valornumerador1 / valordenominador1) * Math.PI);
                b = ((valornumerador1 / valordenominador1) * Math.PI);


            } catch (Exception e) {
                //mensaje de error
                JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
                //limpiar los txtfield y volver su marco rojo
                numerador1.setText("");
                denominador1.setText("");
                numerador2.setText("");
                denominador2.setText("");
                numerador1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                denominador1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                numerador2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                denominador2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                return;
                //hacer la operacion para asignarle los valores de pi radian a las variables a y b


            }
        } else if (opcion == 2) {
            //validar los txtfield de grados
            try {
                double valorgrados1 = gradosnormales1.getText().isEmpty() ? 0.0 : Double.parseDouble(gradosnormales1.getText());
                double valorgrados2 = gradosnormales2.getText().isEmpty() ? 0.0 : Double.parseDouble(gradosnormales2.getText());

                //se hace la operacion para asignarle los valores de grados a las variables a y b
                a = Math.toRadians(valorgrados1);
                b = Math.toRadians(valorgrados2);

            } catch (Exception e) {
                //mensaje de error
                JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
                //limpiar los txtfield y volver su marco rojo
                gradosnormales1.setText("");
                gradosnormales2.setText("");
                gradosnormales1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                gradosnormales2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                return;
            }
        } else if (opcion == 3) {
            //validar los txtfield de grados
            try {
                double valorgrados1 = grados1.getText().isEmpty() ? 0.0 : Double.parseDouble(grados1.getText());
                double valorminutos1 = minutos1.getText().isEmpty() ? 0.0 : Double.parseDouble(minutos1.getText());
                double valorsegundos1 = segundos1.getText().isEmpty() ? 0.0 : Double.parseDouble(segundos1.getText());

                double valorgrados2 = grados2.getText().isEmpty() ? 0.0 : Double.parseDouble(grados2.getText());
                double valorminutos2 = minutos2.getText().isEmpty() ? 0.0 : Double.parseDouble(minutos2.getText());
                double valorsegundos2 = segundos2.getText().isEmpty() ? 0.0 : Double.parseDouble(segundos2.getText());

                //se hace la operacion para asignarle los valores de grados a las variables a y b
                a = Math.toRadians((valorgrados1 + (valorminutos1 / 60) + (valorsegundos1 / 3600)));
                b = Math.toRadians((valorgrados2 + (valorminutos2 / 60) + (valorsegundos2 / 3600)));


            } catch (Exception e) {
                //mensaje de error
                JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
                //limpiar los txtfield y volver su marco rojo
                grados1.setText("");
                minutos1.setText("");
                segundos1.setText("");
                grados2.setText("");
                minutos2.setText("");
                segundos2.setText("");
                grados1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                minutos1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                segundos1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                grados2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                minutos2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                segundos2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
                return;
            }

        }
        //se inicializan las variables error y decimales
        int iteraciones = 200;
        double error = 0.0;
        int decimales = 0;

        //se obtiene el valor de error y decimales
        try {
            error = Double.parseDouble(jTextField9.getText());
            decimales = Integer.parseInt(jTextField10.getText());


        } catch (Exception e) {
            //mensaje de error
            JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
            //limpiar los txtfield y volver su marco rojo
            jTextField9.setText("");
            jTextField10.setText("");
            jTextField9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            jTextField10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            return;
        }

        //validar que el error y los decimales no sean negativos espcificando cual
        if (Double.parseDouble(jTextField9.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "El error no puede ser negativo");
            jTextField9.setText("");
            jTextField9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            return;
        }

        if (Integer.parseInt(jTextField10.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "Los decimales no pueden ser negativos");
            jTextField10.setText("");
            jTextField10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            return;
        }

        int iteracion = 0;

        double fb, fa;
        //se obtiene el valor de la funcion en a y b
        fa = evaluarFuncion(x6, x5, x4, x3, x2, x, c, a
        );
        fb = evaluarFuncion(x6, x5, x4, x3, x2, x, c, b);

        //evaluar ahora con la funcion trigonometrica elegida
        if (radioSeno.isSelected()) {
            fa = Math.sin(fa);
            fb = Math.sin(fb);
        } else if (RadioCos.isSelected()) {
            fa = Math.cos(fa);
            fb = Math.cos(fb);
        } else if (Radiotan.isSelected()) {
            fa = Math.tan(fa);
            fb = Math.tan(fb);
        } else if (radioCot.isSelected()) {
            fa = 1 / Math.tan(fa);
            fb = 1 / Math.tan(fb);
        } else if (radioCsc.isSelected()) {
            fa = 1 / Math.sin(fa);
            fb = 1 / Math.sin(fb);
        } else if (radioSec.isSelected()) {
            fa = 1 / Math.cos(fa);
            fb = 1 / Math.cos(fb);
        }

        //validar si hay raiz en el intervalo
        if (fa * fb > 0) {
            JOptionPane.showMessageDialog(null, "No hay raiz en el intervalo");
            return;
        }
        //se crea la variable para la raiz
        double xr = 0;
        double xrn = 0;
        double fxr = 0;
        double anterior = 0;

        //se crea la variable para el error
        double errorCalculado = 0;

        //se crea la variable para la iteracion
        int i = 1;

        //ciclo para calcular la raiz
        do {
            //primera iteracion
            if (i == 1) {
                xr = ((fa*b) - (fb*a)) / (fa - fb);
                //se evalua la funcion
                fxr = evaluarFuncion(x6, x5, x4, x3, x2, x, c, xr);

                //se remplaza el valor en a
                anterior = a;
                a = xr;
                fa = fxr;
                //se calcula el error
                errorCalculado = Math.abs((a - anterior) / a)*100;

                //se agrega a la tabla
                modelo.addRow(new Object[]{i, redondear(xr, decimales), redondearError(errorCalculado)});

                i++;


            } else {
                //se calcula la segunda raiz
                xrn = b - (((fb*a)-(fb*b))/(fa-fb));
                //se evalua la funcion
                fxr = evaluarFuncion(x6, x5, x4, x3, x2, x, c, xr);


                //se remplaza el valor en a
                anterior = a;
                a = xrn;
                fa = fxr;
                //se calcula el error
                errorCalculado = Math.abs((a - anterior) / a)*100;
                //se agrega a la tabla
                modelo.addRow(new Object[]{i, redondear(xrn, decimales), redondearError(errorCalculado)});

                i++;

                //se valida el numero de iteraciones
                if (i > iteraciones) {
                    //mostrar en el mensaje que no se encontro la raiz en la iteracion 200, la raiz es : y el error relativo:
                    JOptionPane.showMessageDialog(null, "No se encontró la raíz en la iteración 200, la raíz es: " + redondear(xrn, decimales) + " y el error relativo es: " + redondearError(errorCalculado), "Error", JOptionPane.ERROR_MESSAGE);

                    break;
                }




            }
        } while (errorCalculado > error);





















    }//GEN-LAST:event_btnCalcularActionPerformed

    public static double obtenerValor(JTextField campo) {
        String texto =" ";
        texto = campo.getText().trim(); // Asegurarse de que no hay espacios en blanco
        if (texto.isEmpty()) {
            return 0.0; // Devuelve 0.0 si el campo de texto está vacío
        } else {
            return Double.parseDouble(texto);
        }
    }
    private void resaltarCampo(JTextField campo) {
        if (campo.getText().isEmpty()) {
            campo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        } else {
            campo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))); // Restablecer borde si tiene un valor
        }
    }
    //metodo para redondear error
    public double redondearError(double valor) {
        BigDecimal bd = new BigDecimal(valor);
        bd = bd.setScale(2, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    //metodo para redondear
    public double redondear(double valor, int decimales) {
        BigDecimal bd = new BigDecimal(valor);
        bd = bd.setScale(decimales, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    private void RadioGradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioGradosActionPerformed
        // TODO add your handling code here:
        //se eliminan los botones de radianes si existen
        if (piRadianButton != null && decimalRadianButton != null) {
            getContentPane().remove(piRadianButton);
            getContentPane().remove(decimalRadianButton);
            piRadianButton = null;
            decimalRadianButton = null;
        }

        //se eliminan los botones de grados si existen
        if (DeciamlesGrado != null && MinutosGrado != null) {
            getContentPane().remove(DeciamlesGrado);
            getContentPane().remove(MinutosGrado);
            DeciamlesGrado = null;
            MinutosGrado = null;
        }
        //elimina los txtfield de piradian
        if (numerador1 != null && denominador1 != null && numerador2 != null && denominador2 != null) {
            getContentPane().remove(numerador1);
            getContentPane().remove(denominador1);
            getContentPane().remove(numerador2);
            getContentPane().remove(denominador2);
            numerador1 = null;
            denominador1 = null;
            numerador2 = null;
            denominador2 = null;
        }


        //eliminar los txtfield de radianes
        if (radian1 != null && radian2 != null) {
            getContentPane().remove(radian1);
            getContentPane().remove(radian2);
            radian1 = null;
            radian2 = null;
        }

        //eliminar los txtfield de grados
        if (grados1 != null && grados2 != null) {
            getContentPane().remove(grados1);
            getContentPane().remove(grados2);
            grados1 = null;
            grados2 = null;
        }

        //eliminar los txtfield de grados
        if (minutos1 != null && minutos2 != null) {
            getContentPane().remove(minutos1);
            getContentPane().remove(minutos2);
            minutos1 = null;
            minutos2 = null;
        }

        //eliminar los txtfield de grados
        if (segundos1 != null && segundos2 != null) {
            getContentPane().remove(segundos1);
            getContentPane().remove(segundos2);
            segundos1 = null;
            segundos2 = null;
        }

        //eliminar los txtfield de grados
        if (gradosnormales1 != null && gradosnormales2 != null) {
            getContentPane().remove(gradosnormales1);
            getContentPane().remove(gradosnormales2);
            gradosnormales1 = null;
            gradosnormales2 = null;
        }






        //se crean los nuevos JradioButton
        DeciamlesGrado = new JRadioButton("Decimales en grados");
        MinutosGrado = new JRadioButton("DMS");

        //se crea un nuevo ButtonGroup
        ButtonGroup groupUnidadesAngulares = new ButtonGroup();
        groupUnidadesAngulares.add(DeciamlesGrado);
        groupUnidadesAngulares.add(MinutosGrado);

        //se agregan los nuevos JradioButton al panel
        getContentPane().add(DeciamlesGrado);
        getContentPane().add(MinutosGrado);

        //se posicionan los nuevos JradioButton
        DeciamlesGrado.setBounds(40, 250, 150, 23);
        MinutosGrado.setBounds(200, 250, 100, 23);

        //se actualiza el panel
        getContentPane().revalidate();
        getContentPane().repaint();

        //action listener vacio para DeciamlesGrado
        DeciamlesGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciamlesGradoActionPerformed(evt);
            }
        });

        //action listener vacio para MinutosGrado
        MinutosGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinutosGradoActionPerformed(evt);
            }
        });


    }//GEN-LAST:event_RadioGradosActionPerformed

    //evento de DeciamlesGrado
    private void DeciamlesGradoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        opcion = 2;
        //oculta los botones de grados
        if (DeciamlesGrado != null && MinutosGrado != null) {
            getContentPane().remove(DeciamlesGrado);
            getContentPane().remove(MinutosGrado);
            DeciamlesGrado = null;
            MinutosGrado = null;
        }

        //utilizar los dos txtfield de grados para ingresar los valores
        //se crean los nuevos JtextField
        gradosnormales1 = new JTextField();
        gradosnormales2 = new JTextField();

        //se agregan los nuevos JtextField al panel
        getContentPane().add(gradosnormales1);
        getContentPane().add(gradosnormales2);

        //se posicionan los nuevos JtextField
        gradosnormales1.setBounds(40, 300, 100, 23);
        gradosnormales2.setBounds(150, 300, 100, 23);

        //se actualiza el panel
        getContentPane().revalidate();
        getContentPane().repaint();
    }

    //evento de MinutosGrado
    private void MinutosGradoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        opcion = 3;
        //oculta los botones de grados
        if (DeciamlesGrado != null && MinutosGrado != null) {
            getContentPane().remove(DeciamlesGrado);
            getContentPane().remove(MinutosGrado);
            DeciamlesGrado = null;
            MinutosGrado = null;
        }

        //utilizar los 6 txtfield para ingresar los valores
        //se crean los nuevos JtextField
        grados1 = new JTextField();
        minutos1 = new JTextField();
        segundos1 = new JTextField();

        grados2 = new JTextField();
        minutos2 = new JTextField();
        segundos2 = new JTextField();

        //se agregan los nuevos JtextField al panel
        getContentPane().add(grados1);
        getContentPane().add(minutos1);
        getContentPane().add(segundos1);

        getContentPane().add(grados2);
        getContentPane().add(minutos2);
        getContentPane().add(segundos2);

        //se posicionan los nuevos JtextField
        grados1.setBounds(40, 300, 100, 23);
        minutos1.setBounds(150, 300, 100, 23);
        segundos1.setBounds(260, 300, 100, 23);

        grados2.setBounds(40, 350, 100, 23);
        minutos2.setBounds(150, 350, 100, 23);
        segundos2.setBounds(260, 350, 100, 23);

        //se actualiza el panel
        getContentPane().revalidate();
        getContentPane().repaint();


    }

    //metodo para evaluar la funcion
    public static double evaluarFuncion(double x6, double x5, double x4, double x3, double x2, double x, double c, double x0) {

        return x6 * Math.pow(x0, 6) + x5 * Math.pow(x0, 5) + x4 * Math.pow(x0, 4) + x3 * Math.pow(x0, 3) + x2 * Math.pow(x0, 2) + x * x0 + c;
    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReglaFalsa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReglaFalsa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReglaFalsa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReglaFalsa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReglaFalsa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RadioCos;
    private javax.swing.JRadioButton RadioGrados;
    private javax.swing.JRadioButton RadioRadianes;
    private javax.swing.JRadioButton Radiotan;
    private javax.swing.JTextField btnC;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JTextField btnx;
    private javax.swing.JTextField btnx2;
    private javax.swing.JTextField btnx3;
    private javax.swing.JTextField btnx4;
    private javax.swing.JTextField btnx5;
    private javax.swing.JTextField btnx6;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JRadioButton radioCot;
    private javax.swing.JRadioButton radioCsc;
    private javax.swing.JRadioButton radioSec;
    private javax.swing.JRadioButton radioSeno;
    // End of variables declaration//GEN-END:variables
}
